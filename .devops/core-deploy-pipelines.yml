# only manual
trigger: none
pr: none

parameters:
  - name: 'DEV'
    displayName: 'Run on DEV environment'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'UAT'
    displayName: 'Run on UAT environment'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'PROD'
    displayName: 'Run on PROD environment'
    type: boolean
    default: True
    values:
      - False
      - True

variables:
  TIME_OUT: 10

pool:
  vmImage: 'ubuntu-20.04'

resources:
  repositories:
    - repository: terraform
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v2.4.0
      endpoint: 'io-azure-devops-github-ro'

stages:
  - stage: apply_dev
    dependsOn: []
    condition: and(succeeded(), eq(${{parameters.DEV}}, true))
    pool:
      name: cstar-dev-linux
    jobs:
      - job: tf_apply_dev
        timeoutInMinutes: $[variables.TIME_OUT]
        steps:
          - checkout: self
          # 1. Install terraform
          - template: templates/terraform-setup/template.yaml@terraform
          # 2. Run terraform plan
          - template: templates/terraform-plan/template.yaml@terraform
            parameters:
              ENVIRONMENT: "dev"
              WORKINGDIR: 'src/core'
              AZURE_SERVICE_CONNECTION_NAME: DEV-CSTAR-SERVICE-CONN
          # 3. Run terraform apply
          - template: templates/terraform-apply/template.yaml@terraform
            parameters:
              ENVIRONMENT: "dev"
              WORKINGDIR: 'src/core'
              AZURE_SERVICE_CONNECTION_NAME: DEV-CSTAR-SERVICE-CONN

  - stage: apply_uat
    dependsOn: []
    condition: and(succeeded(), eq(${{parameters.UAT}}, true))
    pool:
      name: cstar-uat-linux
    jobs:
      #
      # idpay_common
      #
      - job: tf_apply_uat
        timeoutInMinutes: $[variables.TIME_OUT]
        steps:
          - checkout: self
          # 1. Install terraform
          - template: templates/terraform-setup/template.yaml@terraform
          # 2. Run terraform plan
          - template: templates/terraform-plan/template.yaml@terraform
            parameters:
              ENVIRONMENT: "uat"
              WORKINGDIR: 'src/core'
              AZURE_SERVICE_CONNECTION_NAME: UAT-CSTAR-SERVICE-CONN
          # 3. Run terraform apply
          - template: templates/terraform-apply/template.yaml@terraform
            parameters:
              ENVIRONMENT: "uat"
              WORKINGDIR: 'src/core'
              AZURE_SERVICE_CONNECTION_NAME: UAT-CSTAR-SERVICE-CONN

  - stage: apply_prod
    dependsOn: []
    condition: and(succeeded(), eq(${{parameters.PROD}}, true))
    pool:
      name: cstar-prod-linux
    jobs:
      #
      # idpay_common
      #
      - job: tf_apply_prod
        timeoutInMinutes: $[variables.TIME_OUT]
        steps:
          - checkout: self
          # 1. Install terraform
          - template: templates/terraform-setup/template.yaml@terraform
          # 2. Run terraform plan
          - template: templates/terraform-plan/template.yaml@terraform
            parameters:
              ENVIRONMENT: "prod"
              WORKINGDIR: 'src/core'
              AZURE_SERVICE_CONNECTION_NAME: PROD-CSTAR-SERVICE-CONN
          # 3. Run terraform apply
          - template: templates/terraform-apply/template.yaml@terraform
            parameters:
              ENVIRONMENT: "prod"
              WORKINGDIR: 'src/core'
              AZURE_SERVICE_CONNECTION_NAME: PROD-CSTAR-SERVICE-CONN
