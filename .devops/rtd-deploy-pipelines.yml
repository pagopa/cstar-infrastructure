# only manual
trigger: none
pr: none

parameters:
  - name: 'DEV'
    displayName: 'Run on DEV environment'
    type: boolean
    default: True
    values:
      - False
      - True
  # - name: 'UAT'
  #   displayName: 'Run on UAT environment'
  #   type: boolean
  #   default: True
  #   values:
  #     - False
  #     - True
  # - name: 'PROD'
  #   displayName: 'Run on PROD environment'
  #   type: boolean
  #   default: True
  #   values:
  #     - False
  #     - True

variables:
  TIME_OUT: 10
  DEV01_AKS_APISERVER_URL: '$(TF_DEV01_AKS_APISERVER_URL)'
  DEV01_AKS_AZURE_DEVOPS_SA_CACRT: '$(TF_DEV01_AKS_AZURE_DEVOPS_SA_CACRT)'
  DEV01_AKS_AZURE_DEVOPS_SA_TOKEN: '$(TF_DEV01_AKS_AZURE_DEVOPS_SA_TOKEN)'
  AKS_DEV_NAME: '$(TF_AKS_DEV_NAME)'

pool:
  vmImage: 'ubuntu-20.04'

resources:
  repositories:
    - repository: terraform
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/heads/DEVOPS-549-pipelines-fix-deploy-iac-la-richiesta-di-autorizzazione-non-e-piu-presente
      endpoint: 'io-azure-devops-github-ro'

stages:
  - ${{ if eq(parameters['ENV'], 'dev') }}:
    # DEV RTD APP
    - template: templates/terraform-plan-apply/template.yaml@terraform
      parameters:
        DOMAIN_NAME: 'rtd_app'
        AZURE_DEVOPS_POOL_AGENT_NAME: "cstar-dev-linux"
        ENVIRONMENT: "dev"
        WORKINGDIR: 'src/domains/rtd-app'
        AZURE_SERVICE_CONNECTION_NAME: DEV-CSTAR-SERVICE-CONN
        AKS_NAME: ${{ variables.AKS_DEV_NAME }}
        AKS_API_SERVER_URL: ${{ variables.DEV01_AKS_APISERVER_URL }}
        AKS_AZURE_DEVOPS_SA_CA_CRT: ${{ variables.DEV01_AKS_AZURE_DEVOPS_SA_CACRT }}
        AKS_AZURE_DEVOPS_SA_TOKEN: ${{ variables.DEV01_AKS_AZURE_DEVOPS_SA_TOKEN }}

    # DEV RTD COMMON
    - template: templates/terraform-plan-apply/template.yaml@terraform
      parameters:
        DOMAIN_NAME: 'rtd_common'
        AZURE_DEVOPS_POOL_AGENT_NAME: "cstar-dev-linux"
        ENVIRONMENT: "dev"
        WORKINGDIR: 'src/domains/rtd-common'
        AZURE_SERVICE_CONNECTION_NAME: DEV-CSTAR-SERVICE-CONN
        AKS_NAME: ${{ variables.AKS_DEV_NAME }}
        AKS_API_SERVER_URL: ${{ variables.DEV01_AKS_APISERVER_URL }}
        AKS_AZURE_DEVOPS_SA_CA_CRT: ${{ variables.DEV01_AKS_AZURE_DEVOPS_SA_CACRT }}
        AKS_AZURE_DEVOPS_SA_TOKEN: ${{ variables.DEV01_AKS_AZURE_DEVOPS_SA_TOKEN }}

  - ${{ if eq(parameters['ENV'], 'uat') }}:
    # UAT RTD APP
    - template: templates/terraform-plan-apply/template.yaml@terraform
      parameters:
        DOMAIN_NAME: 'rtd_app'
        AZURE_DEVOPS_POOL_AGENT_NAME: "cstar-uat-linux"
        ENVIRONMENT: "uat"
        WORKINGDIR: 'src/domains/rtd-app'
        AZURE_SERVICE_CONNECTION_NAME: DEV-CSTAR-SERVICE-CONN
        AKS_NAME: ${{ variables.AKS_DEV_NAME }}
        AKS_API_SERVER_URL: ${{ variables.DEV01_AKS_APISERVER_URL }}
        AKS_AZURE_DEVOPS_SA_CA_CRT: ${{ variables.DEV01_AKS_AZURE_DEVOPS_SA_CACRT }}
        AKS_AZURE_DEVOPS_SA_TOKEN: ${{ variables.DEV01_AKS_AZURE_DEVOPS_SA_TOKEN }}

    # UAT RTD COMMON
    - template: templates/terraform-plan-apply/template.yaml@terraform
      parameters:
        DOMAIN_NAME: 'rtd_common'
        AZURE_DEVOPS_POOL_AGENT_NAME: "cstar-uat-linux"
        ENVIRONMENT: "uat"
        WORKINGDIR: 'src/domains/rtd-common'
        AZURE_SERVICE_CONNECTION_NAME: DEV-CSTAR-SERVICE-CONN
        AKS_NAME: ${{ variables.AKS_DEV_NAME }}
        AKS_API_SERVER_URL: ${{ variables.DEV01_AKS_APISERVER_URL }}
        AKS_AZURE_DEVOPS_SA_CA_CRT: ${{ variables.DEV01_AKS_AZURE_DEVOPS_SA_CACRT }}
        AKS_AZURE_DEVOPS_SA_TOKEN: ${{ variables.DEV01_AKS_AZURE_DEVOPS_SA_TOKEN }}


  # - stage: dev_tf_plan_rtd_common
  #   dependsOn: []
  #   condition: and(succeeded(), eq(${{parameters.DEV}}, true))
  #   pool:
  #     name: cstar-dev-linux
  #   jobs:
  #     #
  #     # rtd_common
  #     #
  #     - job: tf_plan_rtd_common
  #       timeoutInMinutes: $[variables.TIME_OUT]
  #       steps:
  #         - checkout: self
  #         # 1. Install terraform
  #         - template: templates/terraform-setup/template.yaml@terraform
  #         # # 2. Run terraform plan
  #         # - template: templates/terraform-plan/template.yaml@terraform
  #         #   parameters:
  #         #     ENVIRONMENT: "dev"
  #         #     WORKINGDIR: 'src/domains/rtd-common'
  #         #     AZURE_SERVICE_CONNECTION_NAME: DEV-CSTAR-SERVICE-CONN

  # - stage: dev_tf_apply_rtd_common
  #   dependsOn: [tf_plan_rtd_common]
  #   condition: and(succeeded(), eq(${{parameters.DEV}}, true))
  #   pool:
  #     name: cstar-dev-linux
  #   jobs:
  #     - deployment: tf_apply_rtd_common
  #       continueOnError: false
  #       environment: 'DEV'
  #       strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #               - checkout: self
  #               # 1. Install terraform
  #               - template: templates/terraform-setup/template.yaml@terraform
  #               # # 2. Run terraform apply
  #               # - template: templates/terraform-apply/template.yaml@terraform
  #               #   parameters:
  #               #     ENVIRONMENT: "dev"
  #               #     WORKINGDIR: 'src/domains/rtd-common'
  #               #     AZURE_SERVICE_CONNECTION_NAME: DEV-CSTAR-SERVICE-CONN



  # #
  # # rtd_app
  # #

  # - stage: dev_tf_plan_rtd_app
  #   dependsOn: []
  #   condition: and(succeeded(), eq(${{parameters.DEV}}, true))
  #   pool:
  #     name: cstar-dev-linux
  #   jobs:
  #     - job: tf_plan_rtd_app
  #       timeoutInMinutes: $[variables.TIME_OUT]
  #       steps:
  #         - checkout: self
  #         # 1. Install terraform and terragrunt
  #         - template: templates/terraform-setup/template.yaml@terraform
  #         # 2. Run terraform plan
  #         - template: templates/terraform-plan/template.yaml@terraform
  #           parameters:
  #             ENVIRONMENT: "dev"
  #             WORKINGDIR: 'src/domains/rtd-app'
  #             AZURE_SERVICE_CONNECTION_NAME: DEV-CSTAR-SERVICE-CONN
  #             AKS_NAME: ${{ variables.AKS_DEV_NAME }}
  #             AKS_API_SERVER_URL: ${{ variables.DEV01_AKS_APISERVER_URL }}
  #             AKS_AZURE_DEVOPS_SA_CA_CRT: ${{ variables.DEV01_AKS_AZURE_DEVOPS_SA_CACRT }}
  #             AKS_AZURE_DEVOPS_SA_TOKEN: ${{ variables.DEV01_AKS_AZURE_DEVOPS_SA_TOKEN }}


  # - stage: dev_tf_apply_rtd_common
  #   dependsOn: [dev_tf_plan_rtd_app]
  #   condition: and(succeeded(), eq(${{parameters.DEV}}, true))
  #   pool:
  #     name: cstar-dev-linux
  #   jobs:
  #     - deployment: tf_apply_rtd_common
  #       continueOnError: false
  #       environment: 'DEV'
  #       strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #               # 3. Run terraform apply
  #               - template: templates/terraform-apply/template.yaml@terraform
  #                 parameters:
  #                   ENVIRONMENT: "dev"
  #                   WORKINGDIR: 'src/domains/rtd-app'
  #                   AZURE_SERVICE_CONNECTION_NAME: DEV-CSTAR-SERVICE-CONN
  #                   AKS_NAME: ${{ variables.AKS_DEV_NAME }}
  #                   AKS_API_SERVER_URL: ${{ variables.DEV01_AKS_APISERVER_URL }}
  #                   AKS_AZURE_DEVOPS_SA_CA_CRT: ${{ variables.DEV01_AKS_AZURE_DEVOPS_SA_CACRT }}
  #                   AKS_AZURE_DEVOPS_SA_TOKEN: ${{ variables.DEV01_AKS_AZURE_DEVOPS_SA_TOKEN }}

  # - stage: UAT
  #   dependsOn: []
  #   condition: and(succeeded(), eq(${{parameters.UAT}}, true))
  #   pool:
  #     name: cstar-uat-linux
  #   jobs:
  #     - job: tf_install
  #       steps:
  #         # 1. Install terraform and terragrunt
  #         - template: templates/terraform-setup/template.yaml@terraform
  #     - job: tf_plan
  #       dependsOn: tf_install
  #       timeoutInMinutes: $[variables.TIME_OUT]
  #       steps:
  #         - checkout: self
  #         # 2. Run terragrunt plan
  #         - template: templates/terraform-plan/template.yaml@terraform
  #           parameters:
  #             SUBSCRIPTION: UAT-CSTAR-SERVICE-CONN
  #             ENVIRONMENT: uat

  # - stage: PROD
  #   dependsOn: []
  #   condition: and(succeeded(), eq(${{parameters.PROD}}, true))
  #   pool:
  #     name: cstar-prod-linux
  #   jobs:
  #     - job: tf_install
  #       steps:
  #         # 1. Install terraform and terragrunt
  #         - template: templates/terraform-setup/template.yaml@terraform
  #     - job: tf_plan
  #       dependsOn: tf_install
  #       timeoutInMinutes: $[variables.TIME_OUT]
  #       steps:
  #         - checkout: self
  #         # 2. Run terragrunt plan
  #         - template: templates/terraform-plan/template.yaml@terraform
  #           parameters:
  #             SUBSCRIPTION: PROD-CSTAR-SERVICE-CONN
  #             ENVIRONMENT: prod
