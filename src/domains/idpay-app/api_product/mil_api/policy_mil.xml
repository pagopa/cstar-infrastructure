<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <set-header name="x-apim-request-id" exists-action="override">
          <value>@(context.RequestId.ToString())</value>
        </set-header>

        <set-variable name="acquirerId" value="@(context.Request.Headers.GetValueOrDefault("x-acquirer-id", ""))" />
        <set-variable name="isMerchantIdRequired" value="@(context.Variables.GetValueOrDefault("isMerchantIdRequired", "true"))" />
        <choose>
          <when condition="@(context.Variables["acquirerId"] == "")">
            <return-response>
              <set-status code="400" />
              <set-body>@{
                return new JObject(
                  new JProperty("code", "INVALID_REQUEST"),
                  new JProperty("message", "Required request header 'x-acquirer-id' is not present")
                ).ToString();
              }</set-body>
            </return-response>
          </when>
          <when condition="@(context.Variables["isMerchantIdRequired"] == "true")">
            <set-variable name="merchantFiscalCode" value="@(context.Request.Headers.GetValueOrDefault("x-merchant-fiscalcode",""))" />
            <choose>
              <when condition="@(context.Variables["merchantFiscalCode"] == "")">
                <return-response>
                  <set-status code="400" />
                  <set-body>@{
                    return new JObject(
                    new JProperty("code", "INVALID_REQUEST"),
                    new JProperty("message", "Required request header 'x-merchant-fiscalcode' is not present")
                    ).ToString();
                    }</set-body>
                </return-response>
              </when>
              <otherwise>
                <include-fragment fragment-id="idpay-merchant-id-retriever" />
                <choose>
                  <when condition="@(context.Variables["merchantId"] == null)">
                    <return-response>
                      <set-status code="403" reason="Unauthorized" />
                    </return-response>
                  </when>
                  <otherwise>
                    <set-header name="x-merchant-id" exists-action="override">
                      <value>@((String)context.Variables["merchantId"])</value>
                    </set-header>
                  </otherwise>
                </choose>
              </otherwise>
            </choose>
          </when>
        </choose>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>
