{
  "name": "For each pending file in Cosmos",
  "type": "ForEach",
  "dependsOn": [
    {
      "activity": "Extract pending files in Cosmos",
      "dependencyConditions": [
        "Succeeded"
      ]
    }
  ],
  "userProperties": [],
  "typeProperties": {
    "items": {
      "value": "@activity('Extract pending files in Cosmos').output.value",
      "type": "Expression"
    },
    "isSequential": true,
    "activities": [
      ${check_flow_validity_activity},
      {
        "name": "If file is not valid",
        "type": "IfCondition",
        "dependsOn": [
          {
            "activity": "Check validity",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "userProperties": [],
        "typeProperties": {
          "expression": {
            "value": "@equals(activity('Check validity').output.firstRow.valid,false)",
            "type": "Expression"
          },
          "ifFalseActivities": [
            {
              "name": "Write pending filenames to file",
              "type": "Copy",
              "dependsOn": [],
              "policy": {
                "timeout": "0.12:00:00",
                "retry": 0,
                "retryIntervalInSeconds": 30,
                "secureOutput": false,
                "secureInput": false
              },
              "userProperties": [],
              "typeProperties": {
                "source": {
                  "type": "CosmosDbSqlApiSource",
                  "additionalColumns": [
                    {
                      "name": "validity",
                      "value": "flow_still_valid_inquire"
                    }
                  ],
                  "query": {
                    "value": "@concat('SELECT DISTINCT c.sourceFileName, c.transmissionDate FROM c where c.sourceFileName = \"', item().sourceFileName,'\"')\n",
                    "type": "Expression"
                  },
                  "preferredRegions": [],
                  "detectDatetime": true
                },
                "sink": {
                  "type": "DelimitedTextSink",
                  "storeSettings": {
                    "type": "AzureBlobStorageWriteSettings",
                    "copyBehavior": "PreserveHierarchy"
                  },
                  "formatSettings": {
                    "type": "DelimitedTextWriteSettings",
                    "quoteAllText": true,
                    "fileExtension": ".txt"
                  }
                },
                "enableStaging": false,
                "translator": {
                  "type": "TabularTranslator",
                  "mappings": [
                    {
                      "source": {
                        "path": "$['sourceFileName']"
                      },
                      "sink": {
                        "name": "filename",
                        "type": "String"
                      }
                    },
                    {
                      "source": {
                        "path": "$['transmissionDate']"
                      },
                      "sink": {
                        "name": "transmission_date",
                        "type": "Date"
                      }
                    },
                    {
                      "source": {
                        "path": "$['validity']"
                      },
                      "sink": {
                        "name": "validity",
                        "type": "String"
                      }
                    }
                  ]
                }
              },
              "inputs": [
                {
                  "referenceName": "Aggregate",
                  "type": "DatasetReference"
                }
              ],
              "outputs": [
                {
                  "referenceName": "PendingFile",
                  "type": "DatasetReference",
                  "parameters": {
                    "filename": {
                      "value": "@concat(pipeline().RunId,'_',item().sourceFileName,'.csv')",
                      "type": "Expression"
                    }
                  }
                }
              ]
            }
          ],
          "ifTrueActivities": [
            {
              "name": "Write pending invalid filenames to file",
              "type": "Copy",
              "dependsOn": [],
              "policy": {
                "timeout": "0.12:00:00",
                "retry": 0,
                "retryIntervalInSeconds": 30,
                "secureOutput": false,
                "secureInput": false
              },
              "userProperties": [],
              "typeProperties": {
                "source": {
                  "type": "CosmosDbSqlApiSource",
                  "additionalColumns": [
                    {
                      "name": "validity",
                      "value": "flow_invalid_deleted"
                    }
                  ],
                  "query": {
                    "value": "@concat('SELECT DISTINCT c.sourceFileName, c.transmissionDate FROM c where c.sourceFileName = \"', item().sourceFileName,'\"')\n",
                    "type": "Expression"
                  },
                  "preferredRegions": [],
                  "detectDatetime": true
                },
                "sink": {
                  "type": "DelimitedTextSink",
                  "storeSettings": {
                    "type": "AzureBlobStorageWriteSettings",
                    "copyBehavior": "PreserveHierarchy"
                  },
                  "formatSettings": {
                    "type": "DelimitedTextWriteSettings",
                    "quoteAllText": true,
                    "fileExtension": ".txt"
                  }
                },
                "enableStaging": false,
                "translator": {
                  "type": "TabularTranslator",
                  "mappings": [
                    {
                      "source": {
                        "path": "$['sourceFileName']"
                      },
                      "sink": {
                        "name": "filename",
                        "type": "String"
                      }
                    },
                    {
                      "source": {
                        "path": "$['transmissionDate']"
                      },
                      "sink": {
                        "name": "transmission_date",
                        "type": "Date"
                      }
                    },
                    {
                      "source": {
                        "path": "$['validity']"
                      },
                      "sink": {
                        "name": "validity",
                        "type": "String"
                      }
                    }
                  ]
                }
              },
              "inputs": [
                {
                  "referenceName": "Aggregate",
                  "type": "DatasetReference"
                }
              ],
              "outputs": [
                {
                  "referenceName": "PendingFile",
                  "type": "DatasetReference",
                  "parameters": {
                    "filename": {
                      "value": "@concat(pipeline().RunId,'_',item().sourceFileName,'.csv')",
                      "type": "Expression"
                    }
                  }
                }
              ]
            },
            {
              "name": "Execute invalidate_flow pipeline",
              "type": "ExecutePipeline",
              "dependsOn": [
                {
                  "activity": "Write pending invalid filenames to file",
                  "dependencyConditions": [
                    "Succeeded"
                  ]
                }
              ],
              "policy": {
                "secureInput": false
              },
              "userProperties": [],
              "typeProperties": {
                "pipeline": {
                  "referenceName": "invalidate_flow",
                  "type": "PipelineReference"
                },
                "waitOnCompletion": true,
                "parameters": {
                  "flows": {
                    "value": "@array(item().sourceFileName)",
                    "type": "Expression"
                  }
                }
              }
            }
          ]
        }
      }
    ]
  }
}
