parameters{
	windowStart as timestamp,
	windowEnd as timestamp,
	RunID as string
}
source(output(
		id as string,
		status as integer,
		errorCode as string
	),
	allowSchemaDrift: false,
	validateSchema: true,
	ignoreNoFilesFound: true,
	modifiedAfter: ($windowStart),
	modifiedBefore: ($windowEnd),
	wildcardPaths:['ack/CSTAR.ADEACK.*']) ~> sourceAck
source(output(
		accountingDate as string,
		acquirerId as string,
		currency as integer,
		fileName as string,
		fiscalCode as string,
		merchantId as string,
		numTrx as integer,
		operationType as string,
		posType as string,
		senderCode as string,
		terminalId as string,
		totalAmount as integer,
		transmissionDate as string,
		vat as string
	),
	allowSchemaDrift: false,
	validateSchema: false,
	format: 'document',
	systemColumns: true) ~> aggregates
joinAcksWithAggregatesOnId alterRow(updateIf(aggregates@id==sourceAck@id)) ~> updAggregatesWithAck
updAggregatesWithAck derive(ackFileName = $RunID + '/' + toString(senderCode) + '/' + 'ADEACK' + '.' + toString(senderCode) + '.' + toString(acquirerId) + '.' + toString(currentDate('YYYYMMdd')) + '.csv') ~> addFileName
sourceAck, aggregates join(sourceAck@id == aggregates@id,
	joinType:'inner',
	matchType:'exact',
	ignoreSpaces: false,
	broadcast: 'auto')~> joinAcksWithAggregatesOnId
addFileName select(mapColumn(
		merchantId,
		terminalId,
		fiscalCode,
		acquirerId,
		status,
		errorCode,
		ackFileName
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> projectSenderAdeAck
projectSenderAdeAck filter(and(notEquals(status, 0), notEquals(status, 2))) ~> selectByStatusNotOk
updAggregatesWithAck select(mapColumn(
		id = sourceAck@id,
		status,
		errorCode,
		accountingDate,
		acquirerId,
		currency,
		fileName,
		fiscalCode,
		merchantId,
		numTrx,
		operationType,
		posType,
		senderCode,
		terminalId,
		totalAmount,
		transmissionDate,
		vat
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> projectOnlyOneID
projectOnlyOneID sink(allowSchemaDrift: true,
	validateSchema: true,
	input(
		accountingDate as string,
		acquirerId as string,
		currency as integer,
		errorCode as string,
		fileName as string,
		fiscalCode as string,
		merchantId as string,
		numTrx as integer,
		operationType as string,
		posType as string,
		senderCode as string,
		status as integer,
		terminalId as string,
		totalAmount as integer,
		transmissionDate as string,
		vat as string
	),
	deletable:false,
	insertable:false,
	updateable:true,
	upsertable:false,
	format: 'document',
	partitionKey: ['/terminalId'],
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	mapColumn(
		id,
		status,
		errorCode,
		accountingDate,
		acquirerId,
		currency,
		fiscalCode,
		merchantId,
		numTrx,
		operationType,
		posType,
		senderCode,
		terminalId,
		totalAmount,
		transmissionDate,
		vat,
		fileName
	)) ~> aggregatesWithAck
selectByStatusNotOk sink(allowSchemaDrift: false,
	validateSchema: true,
	input(
		senderCode as string,
		acquirerId as string,
		fiscalCode as string
	),
	rowUrlColumn:'ackFileName',
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> wrongFiscalCodesByAcquirer
