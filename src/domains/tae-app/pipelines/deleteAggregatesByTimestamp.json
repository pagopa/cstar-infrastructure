[
      {
        "name": "Set query",
        "type": "SetVariable",
        "dependsOn": [
          {
            "activity": "Set ts min",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "userProperties": [],
        "typeProperties": {
          "variableName": "query",
          "value": {
            "value": "@concat('SELECT c.id, c.terminalId, 10 as ttl FROM c WHERE c.transmissionDate = SUBSTRING(\"', variables('ts_min'),'\", 0, 19)')",
            "type": "Expression"
          }
        }
      },
      {
        "name": "Set trigger ts",
        "type": "SetVariable",
        "dependsOn": [],
        "userProperties": [],
        "typeProperties": {
          "variableName": "ts_trigger",
          "value": {
            "value": "@string(div(sub(ticks(pipeline().parameters.schedule_time), ticks('1970-01-01')),10000000))",
            "type": "Expression"
          }
        }
      },
      {
        "name": "Set ts min",
        "type": "SetVariable",
        "dependsOn": [
          {
            "activity": "Set start_cleaning",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "userProperties": [],
        "typeProperties": {
          "variableName": "ts_min",
          "value": {
            "value": "@addSeconds(pipeline().parameters.start_ing, mul(sub(int(variables('ts_trigger')), int(variables('start_cleaning'))), pipeline().parameters.coeff))",
            "type": "Expression"
          }
        }
      },
      {
        "name": "Set start_ing",
        "type": "SetVariable",
        "dependsOn": [
          {
            "activity": "Set trigger ts",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "userProperties": [],
        "typeProperties": {
          "variableName": "start_ing",
          "value": {
            "value": "@string(pipeline().parameters.start_ing)",
            "type": "Expression"
          }
        }
      },
      {
        "name": "Set start_cleaning",
        "type": "SetVariable",
        "dependsOn": [
          {
            "activity": "Set start_ing",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "userProperties": [],
        "typeProperties": {
          "variableName": "start_cleaning",
          "value": {
            "value": "@string(pipeline().parameters.start_cleaning)",
            "type": "Expression"
          }
        }
      },
      {
        "name": "Delete",
        "type": "Copy",
        "dependsOn": [
          {
            "activity": "Set query",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "policy": {
          "timeout": "0.12:00:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureOutput": false,
          "secureInput": false
        },
        "userProperties": [],
        "typeProperties": {
          "source": {
            "type": "CosmosDbSqlApiSource",
            "query": {
              "value": "@variables('query')",
              "type": "Expression"
            },
            "preferredRegions": [],
            "detectDatetime": false
          },
          "sink": {
            "type": "CosmosDbSqlApiSink",
            "writeBatchSize": 1000,
            "writeBehavior": "upsert",
            "disableMetricsCollection": false
          },
          "enableStaging": false,
          "translator": {
            "type": "TabularTranslator",
            "mappings": [
              {
                "source": {
                  "path": "$['id']"
                },
                "sink": {
                  "path": "id"
                }
              },
              {
                "source": {
                  "path": "$['terminalId']"
                },
                "sink": {
                  "path": "terminalId"
                }
              },
              {
                "source": {
                  "path": "$['ttl']"
                },
                "sink": {
                  "path": "ttl"
                }
              }
            ],
            "collectionReference": ""
          }
        },
        "inputs": [
          {
            "referenceName": "Aggregate",
            "type": "DatasetReference"
          }
        ],
        "outputs": [
          {
            "referenceName": "Aggregate",
            "type": "DatasetReference"
          }
        ]
      }
    ]
