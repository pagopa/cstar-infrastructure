<policies>
    <inbound>
      <base />
      <set-variable name="keyHash" value="@{
                    System.Security.Cryptography.SHA256 hasher = System.Security.Cryptography.SHA256.Create();
                    return BitConverter.ToString(hasher.ComputeHash(System.Text.Encoding.UTF8.GetBytes(context.Request.Headers.GetValueOrDefault("Ocp-Apim-Subscription-Key","")))).Replace("-", "").ToLowerInvariant();
      }"/>

      <!-- retrieve sender code from filename -->
      <set-variable name="senderCode" value="@(context.Request.Url.ToString().Split('/').Last().Split('.')[1])"/>

      <!-- authorization request -->
      <send-request mode="new" response-variable-name="authorization" timeout="60" ignore-error="true">
        <set-url>@("${rtd-ingress}/rtdmssenderauth/authorize/" + (string)context.Variables["senderCode"])</set-url>
        <set-method>GET</set-method>
        <set-header name="internal-id" exists-action="override">
          <value>@((string)context.Variables["keyHash"])</value>
        </set-header>
      </send-request>

      <!-- exit strategy when authorization fails -->
      <choose>
        <when condition="@(((IResponse)context.Variables["authorization"]).StatusCode != 200)">
          <return-response response-variable-name="authorization">
          </return-response>
        </when>
      </choose>

    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>
